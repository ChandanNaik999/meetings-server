(()=>{"use strict";var e,t={5562:(e,t,n)=>{n.d(t,{CT:()=>r,o3:()=>a,A1:()=>o,ID:()=>c,MR:()=>i,pn:()=>s});var r="/api",a="token",o="name",c="id",i="success",s="error"},3515:(e,t,n)=>{n(4039),n(9256);var r=n(3379),a=n.n(r),o=n(7795),c=n.n(o),i=n(569),s=n.n(i),u=n(3565),d=n.n(u),m=n(9216),l=n.n(m),p=n(4589),h=n.n(p),f=n(6076),g={};g.styleTagTransform=h(),g.setAttributes=d(),g.insert=s().bind(null,"head"),g.domAPI=c(),g.insertStyleElement=l(),a()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;var b=n(3136),v=n(5562),A=(n(3981),n(4559)),y=n.n(A),E=n(6451);function C(e,t,n,r,a,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function w(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){C(o,r,a,c,i,"next",e)}function i(e){C(o,r,a,c,i,"throw",e)}c(void 0)}))}}function x(){return(x=w(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y().get("".concat(v.CT,"/teams"),{headers:{Authorization:"".concat((0,E.LP)())}});case 2:return t=e.sent,e.abrupt("return",t.data);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function I(){return(I=w(regeneratorRuntime.mark((function e(t){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y().post("".concat(v.CT,"/teams/"),t,{headers:{Authorization:"".concat((0,E.LP)())}});case 2:return n=e.sent,e.abrupt("return",n.data);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Z(){return(Z=w(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y().patch("".concat(v.CT,"/teams/").concat(t._id,"?action=add_member&email=").concat(n),{},{headers:{Authorization:"".concat((0,E.LP)())}});case 2:return r=e.sent,e.abrupt("return",r.data);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function L(){return(L=w(regeneratorRuntime.mark((function e(t){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y().patch("".concat(v.CT,"/teams/").concat(t._id,"?action=remove_member"),{},{headers:{Authorization:"".concat((0,E.LP)())}});case 2:return n=e.sent,e.abrupt("return",n.data);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}n(1283),n(7588);const M={name:"Agile team 57",shortName:"agilenew",description:"Team spreading awareness about Agile practices at Zwiggy",members:[]};function T(e,t,n,r,a,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function B(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){T(o,r,a,c,i,"next",e)}function i(e){T(o,r,a,c,i,"throw",e)}c(void 0)}))}}function R(){return(R=B(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y().get("".concat(v.CT,"/users"),{headers:{Authorization:"".concat((0,E.LP)())}});case 2:return t=e.sent,e.abrupt("return",t.data);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var k=[];var P=null;document.getElementById("addNewTeamButton").addEventListener("click",(function(){(P=new bootstrap.Modal(document.getElementById("myModal"))).show()})),document.getElementById("modalDismiss").addEventListener("click",(function(){P.hide()})),document.getElementById("submitAddTeam").addEventListener("click",(function(){P.hide();var e,t=document.getElementById("inputTeamName").value;if(0!==t.length){var n=document.getElementById("inputShortName").value;if(0!==t.length){var r=document.getElementById("teamDescription").value;if(t.length<=0)(0,b.Z)("Please enter a longer description ( 10 characters min )",document.body,v.pn);else{var a=document.getElementById("inputMembers").value.replace(/\s+/g,"").split(","),o=M;o.name=t,o.shortName=n,o.description=r;for(var c=[],i=0;i<a.length;i+=1){var s=a[i];switch(e=s,/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(String(e).toLowerCase())?"email":/@[a-zA-Z\-0-9]+$/.test(String(e).toLowerCase())?"team":"none"){case"email":for(var u=0;u<k.length;u+=1)if(s.toLowerCase()===k[u].email.toLowerCase()){c.push({userId:k[u]._id,email:k[u].email});break}}}o.members=c,function(e){return I.apply(this,arguments)}(o).then((function(e){e.message===v.MR?(P.hide(),(0,b.Z)("Team added successfully",document.body,v.MR)):(0,b.Z)("Error adding team: ".concat(e.message),document.body,v.pn)})).catch((function(e){P.hide();try{(0,b.Z)("Error adding team: ".concat(e.response.data.description),document.body,v.pn)}catch(t){(0,b.Z)("Error adding team: ".concat(e.message),document.body,v.pn)}}))}}else(0,b.Z)("Please enter a team Short name.",document.body,v.pn)}else(0,b.Z)("Please enter a  team name",document.body,v.pn)})),null===localStorage.getItem(v.o3)&&(window.location="/login"),function(){return x.apply(this,arguments)}().then((function(e){e.message===v.MR?function(){return R.apply(this,arguments)}().then((function(t){t.message===v.MR?(k=t.data,function(e){var t=document.getElementById("teamsList");t.innerHTML="",e&&e.length>0?(document.getElementById("teamsListTitle").innerHTML="View and edit the teams that you are part of",e.forEach((function(e){var n=[];e.members.forEach((function(e){n.push(e.email)}));var r=document.createElement("div");r.setAttribute("class","card p-3 m-2");var a=document.createElement("div");a.setAttribute("class","card-body");var o=document.createElement("h5");o.setAttribute("class","card-title"),o.innerHTML=e.name,a.appendChild(o);var c=document.createElement("p");o.setAttribute("class","card-text"),c.innerHTML="@".concat(e.shortName),a.appendChild(c);var i=document.createElement("button");i.innerHTML="Leave team",i.setAttribute("class","button-outline-red px-4"),i.addEventListener("click",(function(){(function(e){return L.apply(this,arguments)})(e).then((function(e){e.message===v.MR?((0,b.Z)("You have been removed from the team",document.body,v.MR),r.remove()):(0,b.Z)("Error removing: ".concat(e.message),document.body,v.pn)})).catch((function(e){try{(0,b.Z)("Error removing: ".concat(e.response.data.description),document.body,v.pn)}catch(t){(0,b.Z)("Error removing: ".concat(e.message),document.body,v.pn)}}))})),a.appendChild(i);var s=document.createElement("hr");s.setAttribute("class","my-3"),a.appendChild(s);var u=document.createElement("p");u.innerHTML="<strong>Members: </strong> ".concat(n.join(", ")),a.appendChild(u);var d=document.createElement("div");d.setAttribute("class","row gy-2 gx-3 align-items-center");var m=document.createElement("div");m.setAttribute("class","col-auto");var l=document.createElement("label");l.setAttribute("class","visually-hidden"),l.setAttribute("for","selectMember"),m.appendChild(l);var p=document.createElement("select");p.setAttribute("class","form-select"),p.setAttribute("id","selectMember"),p.setAttribute("aria-label","Select Member");var h=[];k.forEach((function(e){!1===n.includes(e.email)&&h.push(e)})),p.innerHTML='<option value="none" selected>Select member</option>',h.forEach((function(e){p.innerHTML+='<option value="'.concat(e.email,'">').concat(e.email,"</option>")})),m.appendChild(p),d.appendChild(m);var f=document.createElement("div");f.setAttribute("class","col-auto");var g=document.createElement("button");g.setAttribute("class","button mx-2"),g.innerHTML="Add",g.addEventListener("click",(function(){"none"!==p.value&&function(e,t){return Z.apply(this,arguments)}(e,p.value).then((function(e){e.message===v.MR?(n.push(p.value),u.innerHTML="<strong>Members: </strong> ".concat(n.join(", ")),(0,b.Z)("Added member successfully",document.body,v.MR)):(0,b.Z)("Error adding member: ".concat(e.message),document.body,v.pn)})).catch((function(e){try{(0,b.Z)("Error adding member: ".concat(e.response.data.description),document.body,v.pn)}catch(t){(0,b.Z)("Error adding member: ".concat(e.message),document.body,v.pn)}}))})),f.appendChild(g),d.appendChild(f),a.appendChild(d),r.appendChild(a),t.appendChild(r)}))):document.getElementById("teamsListTitle").innerHTML="Sorry:( you are not part of any team."}(e.data)):(0,b.Z)("Error fetching users: ".concat(t.message),document.body,v.pn)})).catch((function(e){try{(0,b.Z)("Error fetching users: ".concat(e.response.data.description),document.body,v.pn)}catch(t){(0,b.Z)("Error fetching users: ".concat(e.message),document.body,v.pn)}})):(0,b.Z)("Error fetching teams: ".concat(e.message),document.body,v.pn)})).catch((function(e){try{(0,b.Z)("Error fetching teams: ".concat(e.response.data.description),document.body,v.pn)}catch(t){(0,b.Z)("Error fetching teams: ".concat(e.message),document.body,v.pn)}}))},6076:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(6880),a=n.n(r),o=n(7705),c=n.n(o)()(a());c.push([e.id,":root {\r\n    font-size: 16px;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n}\r\n\r\n.my-col {\r\n    flex-basis: 30%;\r\n    flex-grow: 0;\r\n    flex-shrink: 0;\r\n}\r\n\r\nhr {\r\n    margin-top: 1rem;\r\n    margin-bottom: 1rem;\r\n    border: 0;\r\n    border-top: 1px solid rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.my-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(19rem, 1fr));\r\n}","",{version:3,sources:["webpack://./public/css/teams_list.css"],names:[],mappings:"AAAA;IACI,eAAe;AACnB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,SAAS;IACT,wCAAwC;AAC5C;;AAEA;IACI,aAAa;IACb,2DAA2D;AAC/D",sourcesContent:[":root {\r\n    font-size: 16px;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n}\r\n\r\n.my-col {\r\n    flex-basis: 30%;\r\n    flex-grow: 0;\r\n    flex-shrink: 0;\r\n}\r\n\r\nhr {\r\n    margin-top: 1rem;\r\n    margin-bottom: 1rem;\r\n    border: 0;\r\n    border-top: 1px solid rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.my-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(19rem, 1fr));\r\n}"],sourceRoot:""}]);const i=c}},n={};function r(e){var a=n[e];if(void 0!==a)return a.exports;var o=n[e]={id:e,exports:{}};return t[e](o,o.exports,r),o.exports}r.m=t,e=[],r.O=(t,n,a,o)=>{if(!n){var c=1/0;for(d=0;d<e.length;d++){for(var[n,a,o]=e[d],i=!0,s=0;s<n.length;s++)(!1&o||c>=o)&&Object.keys(r.O).every((e=>r.O[e](n[s])))?n.splice(s--,1):(i=!1,o<c&&(c=o));if(i){e.splice(d--,1);var u=a();void 0!==u&&(t=u)}}return t}o=o||0;for(var d=e.length;d>0&&e[d-1][2]>o;d--)e[d]=e[d-1];e[d]=[n,a,o]},r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{r.b=document.baseURI||self.location.href;var e={856:0};r.O.j=t=>0===e[t];var t=(t,n)=>{var a,o,[c,i,s]=n,u=0;for(a in i)r.o(i,a)&&(r.m[a]=i[a]);if(s)var d=s(r);for(t&&t(n);u<c.length;u++)o=c[u],r.o(e,o)&&e[o]&&e[o][0](),e[c[u]]=0;return r.O(d)},n=self.webpackChunkmeetings=self.webpackChunkmeetings||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=r.O(void 0,[660,960],(()=>r(3515)));a=r.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWV0aW5ncy93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL21lZXRpbmdzLy4vcHVibGljL2pzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9tZWV0aW5ncy8uL3B1YmxpYy9jc3MvdGVhbXNfbGlzdC5jc3M/NzczYyIsIndlYnBhY2s6Ly9tZWV0aW5ncy8uL3B1YmxpYy9qcy9zZXJ2aWNlcy90ZWFtcy5qcyIsIndlYnBhY2s6Ly9tZWV0aW5ncy8uL3B1YmxpYy9qcy9kYXRhL2FkZF90ZWFtX2Zvcm0uanMiLCJ3ZWJwYWNrOi8vbWVldGluZ3MvLi9wdWJsaWMvanMvc2VydmljZXMvdXNlcl9tYW5hZ2VtZW50LmpzIiwid2VicGFjazovL21lZXRpbmdzLy4vcHVibGljL2pzL3RlYW1zX2xpc3QuanMiLCJ3ZWJwYWNrOi8vbWVldGluZ3MvLi9wdWJsaWMvY3NzL3RlYW1zX2xpc3QuY3NzIiwid2VicGFjazovL21lZXRpbmdzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21lZXRpbmdzL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL21lZXRpbmdzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9tZWV0aW5ncy93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL21lZXRpbmdzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbWVldGluZ3Mvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vbWVldGluZ3Mvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbImRlZmVycmVkIiwiQVBJX0JBU0VfVVJMIiwicHJvY2VzcyIsIlRPS0VOIiwiTkFNRSIsIklEIiwiU1VDQ0VTUyIsIkVSUk9SIiwib3B0aW9ucyIsInN0eWxlVGFnVHJhbnNmb3JtIiwic2V0QXR0cmlidXRlcyIsImluc2VydCIsImRvbUFQSSIsImluc2VydFN0eWxlRWxlbWVudCIsImF4aW9zIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJnZXRUb2tlbiIsInJlc3BvbnNlIiwiZGF0YSIsInRlYW1KU09OIiwidGVhbSIsImVtYWlsIiwidXNlcnMiLCJteU1vZGFsIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJib290c3RyYXAiLCJNb2RhbCIsInNob3ciLCJoaWRlIiwiYXR0ZW5kZWUiLCJ0ZWFtTmFtZSIsInZhbHVlIiwibGVuZ3RoIiwidGVhbVNob3J0TmFtZSIsInRlYW1EZXNjcmlwdGlvbiIsImFkZFRvYXN0IiwiYm9keSIsInRlYW1NZW1iZXJzIiwicmVwbGFjZSIsInNwbGl0Iiwic3VibWl0SlNPTiIsIkFERF9URUFNX0ZPUk0iLCJhdHRlbmRlZXNKU09OIiwiaWR4QXR0IiwibWVtYmVyIiwidGVzdCIsIlN0cmluZyIsInRvTG93ZXJDYXNlIiwiaWR4IiwicHVzaCIsInVzZXJJZCIsImFkZFRlYW0iLCJ0aGVuIiwibWVzc2FnZSIsImVycm9yIiwiZGVzY3JpcHRpb24iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwid2luZG93IiwibG9jYXRpb24iLCJmZXRjaFRlYW1zIiwidGVhbXMiLCJnZXRBbGxVc2VycyIsIl91c2VycyIsIm1lZXRpbmdzTGlzdERpdiIsImlubmVySFRNTCIsImZvckVhY2giLCJtZW1iZXJzIiwiY2FyZCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJjYXJkQm9keSIsImNhcmRUaXRsZSIsImFwcGVuZENoaWxkIiwiY2FyZFRleHQiLCJidXR0b25FeGN1c2UiLCJleGN1c2VGcm9tVGVhbSIsInJlbW92ZSIsImhyIiwiam9pbiIsInNlbGVjdE1lbWJlckRpdiIsImNvbFNlbGVjdE1lbWJlciIsImxhYmVsU2VsZWN0TWVtYmVyIiwic2VsZWN0TWVtYmVyIiwibm9uTWVtYmVycyIsInVzZXIiLCJpbmNsdWRlcyIsIm5vbk1lbWJlciIsImNvbFNlbGVjdE1lbWJlcjIiLCJjb2xTZWxlY3RCdXR0b24iLCJhZGRNZW1iZXJUb1RlYW0iLCJwb3B1bGF0ZVRlYW1zIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJtb2R1bGUiLCJpZCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsIk8iLCJyZXN1bHQiLCJjaHVua0lkcyIsImZuIiwicHJpb3JpdHkiLCJub3RGdWxmaWxsZWQiLCJJbmZpbml0eSIsImkiLCJmdWxmaWxsZWQiLCJqIiwiT2JqZWN0Iiwia2V5cyIsImV2ZXJ5Iiwia2V5Iiwic3BsaWNlIiwiciIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwidGhpcyIsIkZ1bmN0aW9uIiwiZSIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJiIiwiYmFzZVVSSSIsInNlbGYiLCJocmVmIiwiaW5zdGFsbGVkQ2h1bmtzIiwiY2h1bmtJZCIsIndlYnBhY2tKc29ucENhbGxiYWNrIiwicGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24iLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJiaW5kIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJtYXBwaW5ncyI6InVCQUFJQSxFLGlGQ0NKLElBQVFDLEVBQWlCQyxPQUNuQkMsRUFBUSxRQUVSQyxFQUFPLE9BQ1BDLEVBQUssS0FFTEMsRUFBVSxVQUNWQyxFQUFRLFMsOEpDR1ZDLEVBQVUsR0FFZEEsRUFBUUMsa0JBQW9CLElBQzVCRCxFQUFRRSxj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QkMsR0FBUyxLQUUxQkQsRUFBZ0J0QyxFQUFTSyxJQUFNLEVBRWhDLE9BQU9kLEVBQW9CTyxFQUFFQyxJQUcxQjZDLEVBQXFCUixLQUEyQixxQkFBSUEsS0FBMkIsc0JBQUssR0FDeEZRLEVBQW1CbkYsUUFBUStFLEVBQXFCSyxLQUFLLEtBQU0sSUFDM0RELEVBQW1CcEcsS0FBT2dHLEVBQXFCSyxLQUFLLEtBQU1ELEVBQW1CcEcsS0FBS3FHLEtBQUtELEssR0MzQ3ZGLElBQUlFLEVBQXNCdkQsRUFBb0JPLE9BQUVKLEVBQVcsQ0FBQyxJQUFJLE1BQU0sSUFBT0gsRUFBb0IsUUFDakd1RCxFQUFzQnZELEVBQW9CTyxFQUFFZ0QsSSIsImZpbGUiOiJ0ZWFtc19saXN0LmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZlcnJlZCA9IFtdO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5PID0gKHJlc3VsdCwgY2h1bmtJZHMsIGZuLCBwcmlvcml0eSkgPT4ge1xuXHRpZihjaHVua0lkcykge1xuXHRcdHByaW9yaXR5ID0gcHJpb3JpdHkgfHwgMDtcblx0XHRmb3IodmFyIGkgPSBkZWZlcnJlZC5sZW5ndGg7IGkgPiAwICYmIGRlZmVycmVkW2kgLSAxXVsyXSA+IHByaW9yaXR5OyBpLS0pIGRlZmVycmVkW2ldID0gZGVmZXJyZWRbaSAtIDFdO1xuXHRcdGRlZmVycmVkW2ldID0gW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldO1xuXHRcdHJldHVybjtcblx0fVxuXHR2YXIgbm90RnVsZmlsbGVkID0gSW5maW5pdHk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWQubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldID0gZGVmZXJyZWRbaV07XG5cdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjaHVua0lkcy5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKChwcmlvcml0eSAmIDEgPT09IDAgfHwgbm90RnVsZmlsbGVkID49IHByaW9yaXR5KSAmJiBPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLk8pLmV2ZXJ5KChrZXkpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fLk9ba2V5XShjaHVua0lkc1tqXSkpKSkge1xuXHRcdFx0XHRjaHVua0lkcy5zcGxpY2Uoai0tLCAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZ1bGZpbGxlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZihwcmlvcml0eSA8IG5vdEZ1bGZpbGxlZCkgbm90RnVsZmlsbGVkID0gcHJpb3JpdHk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGZ1bGZpbGxlZCkge1xuXHRcdFx0ZGVmZXJyZWQuc3BsaWNlKGktLSwgMSlcblx0XHRcdHZhciByID0gZm4oKTtcblx0XHRcdGlmIChyICE9PSB1bmRlZmluZWQpIHJlc3VsdCA9IHI7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59OyIsIi8vIGNvbnN0IEFQSV9CQVNFX1VSTCA9ICdodHRwOi8vbXltZWV0aW5nc2FwcC5oZXJva3VhcHAuY29tL2FwaSc7XHJcbmNvbnN0IHsgQVBJX0JBU0VfVVJMIH0gPSBwcm9jZXNzLmVudjtcclxuY29uc3QgVE9LRU4gPSAndG9rZW4nO1xyXG5jb25zdCBFTUFJTCA9ICdlbWFpbCc7XHJcbmNvbnN0IE5BTUUgPSAnbmFtZSc7XHJcbmNvbnN0IElEID0gJ2lkJztcclxuXHJcbmNvbnN0IFNVQ0NFU1MgPSAnc3VjY2Vzcyc7XHJcbmNvbnN0IEVSUk9SID0gJ2Vycm9yJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBBUElfQkFTRV9VUkwsXHJcbiAgICBUT0tFTixcclxuICAgIEVNQUlMLFxyXG4gICAgTkFNRSxcclxuICAgIElELFxyXG4gICAgU1VDQ0VTUyxcclxuICAgIEVSUk9SLFxyXG59O1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdGVhbXNfbGlzdC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3RlYW1zX2xpc3QuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IHsgQVBJX0JBU0VfVVJMIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcclxuaW1wb3J0IHsgZ2V0VG9rZW4gfSBmcm9tICcuL2F1dGgnO1xyXG5pbXBvcnQgJ2NvcmUtanMvc3RhYmxlJztcclxuaW1wb3J0ICdyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUnO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hUZWFtcygpIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KFxyXG4gICAgICAgIGAke0FQSV9CQVNFX1VSTH0vdGVhbXNgLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYCR7Z2V0VG9rZW4oKX1gLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBhZGRUZWFtKCB0ZWFtSlNPTiApIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChcclxuICAgICAgICBgJHtBUElfQkFTRV9VUkx9L3RlYW1zL2AsXHJcbiAgICAgICAgdGVhbUpTT04sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgJHtnZXRUb2tlbigpfWAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGFkZE1lbWJlclRvVGVhbSggdGVhbSwgZW1haWwgKSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBhdGNoKFxyXG4gICAgICAgIGAke0FQSV9CQVNFX1VSTH0vdGVhbXMvJHt0ZWFtWydfaWQnXX0/YWN0aW9uPWFkZF9tZW1iZXImZW1haWw9JHtlbWFpbH1gLFxyXG4gICAgICAgIHt9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYCR7Z2V0VG9rZW4oKX1gLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBleGN1c2VGcm9tVGVhbSggdGVhbSApIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucGF0Y2goXHJcbiAgICAgICAgYCR7QVBJX0JBU0VfVVJMfS90ZWFtcy8ke3RlYW1bJ19pZCddfT9hY3Rpb249cmVtb3ZlX21lbWJlcmAsXHJcbiAgICAgICAge30sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgJHtnZXRUb2tlbigpfWAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XHJcbn1cclxuXHJcbmV4cG9ydCB7XHJcbiAgICBmZXRjaFRlYW1zLFxyXG4gICAgYWRkVGVhbSxcclxuICAgIGFkZE1lbWJlclRvVGVhbSxcclxuICAgIGV4Y3VzZUZyb21UZWFtLFxyXG59O1xyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG5jb25zdCBBRERfVEVBTV9GT1JNID0ge1xyXG4gICAgXCJuYW1lXCI6IFwiQWdpbGUgdGVhbSA1N1wiLFxyXG4gICAgXCJzaG9ydE5hbWVcIjogXCJhZ2lsZW5ld1wiLFxyXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlRlYW0gc3ByZWFkaW5nIGF3YXJlbmVzcyBhYm91dCBBZ2lsZSBwcmFjdGljZXMgYXQgWndpZ2d5XCIsXHJcbiAgICBcIm1lbWJlcnNcIjogW11cclxufTtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBBRERfVEVBTV9GT1JNOyIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCB7IEFQSV9CQVNFX1VSTCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XHJcbmltcG9ydCB7IGdldFRva2VuIH0gZnJvbSAnLi9hdXRoJztcclxuXHJcbmltcG9ydCAnY29yZS1qcy9zdGFibGUnO1xyXG5pbXBvcnQgJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSc7XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBsaXN0IG9mIGFsbCByZWdpc3RlcmVkIHVzZXJzLlxyXG4gKiBAcmV0dXJucyBsaXN0IG9mIGFsbCB1c2Vyc1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0QWxsVXNlcnMoKSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChcclxuICAgICAgICBgJHtBUElfQkFTRV9VUkx9L3VzZXJzYCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGAke2dldFRva2VuKCl9YCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZ2V0QWxsVXNlcnM7XHJcbiIsImltcG9ydCAnYm9vdHN0cmFwL2Rpc3QvY3NzL2Jvb3RzdHJhcC5taW4uY3NzJztcclxuaW1wb3J0ICcuLi9jc3MvbWFpbi5jc3MnO1xyXG5pbXBvcnQgJy4uL2Nzcy90ZWFtc19saXN0LmNzcyc7XHJcbmltcG9ydCBhZGRUb2FzdCBmcm9tICcuL2N1c3RvbXMvYXBwJztcclxuaW1wb3J0IHsgU1VDQ0VTUywgRVJST1IsIFRPS0VOIH0gZnJvbSAnLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgJy4vYXBwJztcclxuaW1wb3J0IHsgYWRkTWVtYmVyVG9UZWFtLCBmZXRjaFRlYW1zLCBleGN1c2VGcm9tVGVhbSwgYWRkVGVhbSB9IGZyb20gJy4vc2VydmljZXMvdGVhbXMnO1xyXG5pbXBvcnQgQUREX1RFQU1fRk9STSBmcm9tICcuL2RhdGEvYWRkX3RlYW1fZm9ybSc7XHJcbmltcG9ydCBnZXRBbGxVc2VycyBmcm9tICcuL3NlcnZpY2VzL3VzZXJfbWFuYWdlbWVudCc7XHJcblxyXG5sZXQgdXNlcnMgPSBbXTtcclxuXHJcbmZ1bmN0aW9uIHBvcHVsYXRlVGVhbXMoIHRlYW1zICkge1xyXG4gICAgY29uc3QgbWVldGluZ3NMaXN0RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICd0ZWFtc0xpc3QnICk7XHJcbiAgICBtZWV0aW5nc0xpc3REaXYuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgaWYgKCB0ZWFtcyAmJiB0ZWFtcy5sZW5ndGggPiAwICkge1xyXG4gICAgICAgIGNvbnN0IG1lZXRpbmdzTGlzdFRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICd0ZWFtc0xpc3RUaXRsZScgKTtcclxuICAgICAgICBtZWV0aW5nc0xpc3RUaXRsZS5pbm5lckhUTUwgPSAnVmlldyBhbmQgZWRpdCB0aGUgdGVhbXMgdGhhdCB5b3UgYXJlIHBhcnQgb2YnO1xyXG4gICAgICAgIHRlYW1zLmZvckVhY2goICggdGVhbSApID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbWVtYmVycyA9IFtdO1xyXG4gICAgICAgICAgICB0ZWFtWydtZW1iZXJzJ10uZm9yRWFjaCggKCBtZW1iZXIgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBtZW1iZXJzLnB1c2goIG1lbWJlclsnZW1haWwnXSApO1xyXG4gICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKTtcclxuICAgICAgICAgICAgLy8gY2FyZC5zZXRBdHRyaWJ1dGUoICdjbGFzcycsICdjYXJkIG15LWNvbCBwLTMgbS0yIGNvbC0xMiBjb2wtc20tNiBjb2wtbWQtNCcgKTtcclxuICAgICAgICAgICAgY2FyZC5zZXRBdHRyaWJ1dGUoICdjbGFzcycsICdjYXJkIHAtMyBtLTInICk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhcmRCb2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKTtcclxuICAgICAgICAgICAgY2FyZEJvZHkuc2V0QXR0cmlidXRlKCAnY2xhc3MnLCAnY2FyZC1ib2R5JyApO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY2FyZFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2g1JyApO1xyXG4gICAgICAgICAgICBjYXJkVGl0bGUuc2V0QXR0cmlidXRlKCAnY2xhc3MnLCAnY2FyZC10aXRsZScgKTtcclxuICAgICAgICAgICAgY2FyZFRpdGxlLmlubmVySFRNTCA9IHRlYW1bJ25hbWUnXTtcclxuICAgICAgICAgICAgY2FyZEJvZHkuYXBwZW5kQ2hpbGQoIGNhcmRUaXRsZSApO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY2FyZFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAncCcgKTtcclxuICAgICAgICAgICAgY2FyZFRpdGxlLnNldEF0dHJpYnV0ZSggJ2NsYXNzJywgJ2NhcmQtdGV4dCcgKTtcclxuICAgICAgICAgICAgY2FyZFRleHQuaW5uZXJIVE1MID0gYEAke3RlYW1bJ3Nob3J0TmFtZSddfWA7XHJcbiAgICAgICAgICAgIGNhcmRCb2R5LmFwcGVuZENoaWxkKCBjYXJkVGV4dCApO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uRXhjdXNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2J1dHRvbicgKTtcclxuICAgICAgICAgICAgYnV0dG9uRXhjdXNlLmlubmVySFRNTCA9ICdMZWF2ZSB0ZWFtJztcclxuICAgICAgICAgICAgYnV0dG9uRXhjdXNlLnNldEF0dHJpYnV0ZSggJ2NsYXNzJywgJ2J1dHRvbi1vdXRsaW5lLXJlZCBweC00JyApO1xyXG4gICAgICAgICAgICBidXR0b25FeGN1c2UuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZXhjdXNlRnJvbVRlYW0oIHRlYW0gKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCAoIHJlc3BvbnNlICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHJlc3BvbnNlLm1lc3NhZ2UgPT09IFNVQ0NFU1MgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRUb2FzdCggJ1lvdSBoYXZlIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSB0ZWFtJywgZG9jdW1lbnQuYm9keSwgU1VDQ0VTUyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFRvYXN0KCBgRXJyb3IgcmVtb3Zpbmc6ICR7cmVzcG9uc2UubWVzc2FnZX1gLCBkb2N1bWVudC5ib2R5LCBFUlJPUiApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSApXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKCAoIGVycm9yICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkVG9hc3QoIGBFcnJvciByZW1vdmluZzogJHtlcnJvci5yZXNwb25zZS5kYXRhLmRlc2NyaXB0aW9ufWAsIGRvY3VtZW50LmJvZHksIEVSUk9SICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2gge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkVG9hc3QoIGBFcnJvciByZW1vdmluZzogJHtlcnJvci5tZXNzYWdlfWAsIGRvY3VtZW50LmJvZHksIEVSUk9SICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgY2FyZEJvZHkuYXBwZW5kQ2hpbGQoIGJ1dHRvbkV4Y3VzZSApO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnaHInICk7XHJcbiAgICAgICAgICAgIGhyLnNldEF0dHJpYnV0ZSggJ2NsYXNzJywgJ215LTMnICk7XHJcbiAgICAgICAgICAgIGNhcmRCb2R5LmFwcGVuZENoaWxkKCBociApO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdGVhbU1lbWJlcnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAncCcgKTtcclxuICAgICAgICAgICAgdGVhbU1lbWJlcnMuaW5uZXJIVE1MID0gYDxzdHJvbmc+TWVtYmVyczogPC9zdHJvbmc+ICR7bWVtYmVycy5qb2luKCAnLCAnICl9YDtcclxuICAgICAgICAgICAgY2FyZEJvZHkuYXBwZW5kQ2hpbGQoIHRlYW1NZW1iZXJzICk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RNZW1iZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xyXG4gICAgICAgICAgICBzZWxlY3RNZW1iZXJEaXYuc2V0QXR0cmlidXRlKCAnY2xhc3MnLCAncm93IGd5LTIgZ3gtMyBhbGlnbi1pdGVtcy1jZW50ZXInICk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb2xTZWxlY3RNZW1iZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xyXG4gICAgICAgICAgICBjb2xTZWxlY3RNZW1iZXIuc2V0QXR0cmlidXRlKCAnY2xhc3MnLCAnY29sLWF1dG8nICk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsYWJlbFNlbGVjdE1lbWJlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdsYWJlbCcgKTtcclxuICAgICAgICAgICAgbGFiZWxTZWxlY3RNZW1iZXIuc2V0QXR0cmlidXRlKCAnY2xhc3MnLCAndmlzdWFsbHktaGlkZGVuJyApO1xyXG4gICAgICAgICAgICBsYWJlbFNlbGVjdE1lbWJlci5zZXRBdHRyaWJ1dGUoICdmb3InLCAnc2VsZWN0TWVtYmVyJyApO1xyXG4gICAgICAgICAgICBjb2xTZWxlY3RNZW1iZXIuYXBwZW5kQ2hpbGQoIGxhYmVsU2VsZWN0TWVtYmVyICk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RNZW1iZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnc2VsZWN0JyApO1xyXG4gICAgICAgICAgICBzZWxlY3RNZW1iZXIuc2V0QXR0cmlidXRlKCAnY2xhc3MnLCAnZm9ybS1zZWxlY3QnICk7XHJcbiAgICAgICAgICAgIHNlbGVjdE1lbWJlci5zZXRBdHRyaWJ1dGUoICdpZCcsICdzZWxlY3RNZW1iZXInICk7XHJcbiAgICAgICAgICAgIHNlbGVjdE1lbWJlci5zZXRBdHRyaWJ1dGUoICdhcmlhLWxhYmVsJywgJ1NlbGVjdCBNZW1iZXInICk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vbk1lbWJlcnMgPSBbXTtcclxuICAgICAgICAgICAgdXNlcnMuZm9yRWFjaCggKCB1c2VyICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCBtZW1iZXJzLmluY2x1ZGVzKCB1c2VyWydlbWFpbCddICkgPT09IGZhbHNlICkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vbk1lbWJlcnMucHVzaCggdXNlciApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICBzZWxlY3RNZW1iZXIuaW5uZXJIVE1MID0gJzxvcHRpb24gdmFsdWU9XCJub25lXCIgc2VsZWN0ZWQ+U2VsZWN0IG1lbWJlcjwvb3B0aW9uPic7XHJcbiAgICAgICAgICAgIG5vbk1lbWJlcnMuZm9yRWFjaCggKCBub25NZW1iZXIgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RNZW1iZXIuaW5uZXJIVE1MICs9IGA8b3B0aW9uIHZhbHVlPVwiJHtub25NZW1iZXJbJ2VtYWlsJ119XCI+JHtub25NZW1iZXJbJ2VtYWlsJ119PC9vcHRpb24+YDtcclxuICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICBjb2xTZWxlY3RNZW1iZXIuYXBwZW5kQ2hpbGQoIHNlbGVjdE1lbWJlciApO1xyXG5cclxuICAgICAgICAgICAgc2VsZWN0TWVtYmVyRGl2LmFwcGVuZENoaWxkKCBjb2xTZWxlY3RNZW1iZXIgKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbFNlbGVjdE1lbWJlcjIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xyXG4gICAgICAgICAgICBjb2xTZWxlY3RNZW1iZXIyLnNldEF0dHJpYnV0ZSggJ2NsYXNzJywgJ2NvbC1hdXRvJyApO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29sU2VsZWN0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2J1dHRvbicgKTtcclxuICAgICAgICAgICAgY29sU2VsZWN0QnV0dG9uLnNldEF0dHJpYnV0ZSggJ2NsYXNzJywgJ2J1dHRvbiBteC0yJyApO1xyXG4gICAgICAgICAgICBjb2xTZWxlY3RCdXR0b24uaW5uZXJIVE1MID0gJ0FkZCc7XHJcbiAgICAgICAgICAgIGNvbFNlbGVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIHNlbGVjdE1lbWJlci52YWx1ZSAhPT0gJ25vbmUnICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZE1lbWJlclRvVGVhbSggdGVhbSwgc2VsZWN0TWVtYmVyLnZhbHVlIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oICggcmVzcG9uc2UgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHJlc3BvbnNlLm1lc3NhZ2UgPT09IFNVQ0NFU1MgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVtYmVycy5wdXNoKCBzZWxlY3RNZW1iZXIudmFsdWUgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZWFtTWVtYmVycy5pbm5lckhUTUwgPSBgPHN0cm9uZz5NZW1iZXJzOiA8L3N0cm9uZz4gJHttZW1iZXJzLmpvaW4oICcsICcgKX1gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFRvYXN0KCAnQWRkZWQgbWVtYmVyIHN1Y2Nlc3NmdWxseScsIGRvY3VtZW50LmJvZHksIFNVQ0NFU1MgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkVG9hc3QoIGBFcnJvciBhZGRpbmcgbWVtYmVyOiAke3Jlc3BvbnNlLm1lc3NhZ2V9YCwgZG9jdW1lbnQuYm9keSwgRVJST1IgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCggKCBlcnJvciApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkVG9hc3QoIGBFcnJvciBhZGRpbmcgbWVtYmVyOiAke2Vycm9yLnJlc3BvbnNlLmRhdGEuZGVzY3JpcHRpb259YCwgZG9jdW1lbnQuYm9keSwgRVJST1IgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2gge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFRvYXN0KCBgRXJyb3IgYWRkaW5nIG1lbWJlcjogJHtlcnJvci5tZXNzYWdlfWAsIGRvY3VtZW50LmJvZHksIEVSUk9SICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgY29sU2VsZWN0TWVtYmVyMi5hcHBlbmRDaGlsZCggY29sU2VsZWN0QnV0dG9uICk7XHJcblxyXG4gICAgICAgICAgICBzZWxlY3RNZW1iZXJEaXYuYXBwZW5kQ2hpbGQoIGNvbFNlbGVjdE1lbWJlcjIgKTtcclxuICAgICAgICAgICAgY2FyZEJvZHkuYXBwZW5kQ2hpbGQoIHNlbGVjdE1lbWJlckRpdiApO1xyXG4gICAgICAgICAgICBjYXJkLmFwcGVuZENoaWxkKCBjYXJkQm9keSApO1xyXG4gICAgICAgICAgICBtZWV0aW5nc0xpc3REaXYuYXBwZW5kQ2hpbGQoIGNhcmQgKTtcclxuICAgICAgICB9ICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG1lZXRpbmdzTGlzdFRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICd0ZWFtc0xpc3RUaXRsZScgKTtcclxuICAgICAgICBtZWV0aW5nc0xpc3RUaXRsZS5pbm5lckhUTUwgPSAnU29ycnk6KCB5b3UgYXJlIG5vdCBwYXJ0IG9mIGFueSB0ZWFtLic7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICAvLyByZWRpcmVjdCB0byBsb2dpbiBwYWdlIGlmIGF1dGhvcml6YXRpb24gdG9rZW4gZG9lc250IGV4aXN0XHJcbiAgICBpZiAoIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCBUT0tFTiApID09PSBudWxsICkge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICcvbG9naW4nO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGZldGNoIHlvdXIgdGVhbXNcclxuICAgIGZldGNoVGVhbXMoKVxyXG4gICAgICAgIC50aGVuKCAoIHRlYW1zICkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIHRlYW1zLm1lc3NhZ2UgPT09IFNVQ0NFU1MgKSB7XHJcbiAgICAgICAgICAgICAgICBnZXRBbGxVc2VycygpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oICggX3VzZXJzICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIF91c2Vycy5tZXNzYWdlID09PSBTVUNDRVNTICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcnMgPSBfdXNlcnMuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVsYXRlVGVhbXMoIHRlYW1zLmRhdGEgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFRvYXN0KCBgRXJyb3IgZmV0Y2hpbmcgdXNlcnM6ICR7X3VzZXJzLm1lc3NhZ2V9YCwgZG9jdW1lbnQuYm9keSwgRVJST1IgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCggKCBlcnJvciApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFRvYXN0KCBgRXJyb3IgZmV0Y2hpbmcgdXNlcnM6ICR7ZXJyb3IucmVzcG9uc2UuZGF0YS5kZXNjcmlwdGlvbn1gLCBkb2N1bWVudC5ib2R5LCBFUlJPUiApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFRvYXN0KCBgRXJyb3IgZmV0Y2hpbmcgdXNlcnM6ICR7ZXJyb3IubWVzc2FnZX1gLCBkb2N1bWVudC5ib2R5LCBFUlJPUiApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYWRkVG9hc3QoIGBFcnJvciBmZXRjaGluZyB0ZWFtczogJHt0ZWFtcy5tZXNzYWdlfWAsIGRvY3VtZW50LmJvZHksIEVSUk9SICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IClcclxuICAgICAgICAuY2F0Y2goICggZXJyb3IgKSA9PiB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBhZGRUb2FzdCggYEVycm9yIGZldGNoaW5nIHRlYW1zOiAke2Vycm9yLnJlc3BvbnNlLmRhdGEuZGVzY3JpcHRpb259YCwgZG9jdW1lbnQuYm9keSwgRVJST1IgKTtcclxuICAgICAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgICAgICBhZGRUb2FzdCggYEVycm9yIGZldGNoaW5nIHRlYW1zOiAke2Vycm9yLm1lc3NhZ2V9YCwgZG9jdW1lbnQuYm9keSwgRVJST1IgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdmFsaWRhdGVFbWFpbCggZW1haWwgKSB7XHJcbiAgICBjb25zdCByZSA9IC9eKChbXjw+KClbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFxdKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcclxuICAgIHJldHVybiByZS50ZXN0KCBTdHJpbmcoIGVtYWlsICkudG9Mb3dlckNhc2UoKSApO1xyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZVRlYW0oIHRlYW0gKSB7XHJcbiAgICBjb25zdCByZSA9IC9AW2EtekEtWlxcLTAtOV0rJC87XHJcbiAgICByZXR1cm4gcmUudGVzdCggU3RyaW5nKCB0ZWFtICkudG9Mb3dlckNhc2UoKSApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhdHRlbmRlZVR5cGUoIGF0dGVuZGVlICkge1xyXG4gICAgbGV0IHR5cGUgPSAnJztcclxuICAgIGlmICggdmFsaWRhdGVFbWFpbCggYXR0ZW5kZWUgKSApIHtcclxuICAgICAgICB0eXBlID0gJ2VtYWlsJztcclxuICAgIH0gZWxzZSBpZiAoIHZhbGlkYXRlVGVhbSggYXR0ZW5kZWUgKSApIHtcclxuICAgICAgICB0eXBlID0gJ3RlYW0nO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0eXBlID0gJ25vbmUnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHR5cGU7XHJcbn1cclxubGV0IG15TW9kYWwgPSBudWxsO1xyXG5cclxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdhZGROZXdUZWFtQnV0dG9uJyApLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsICgpID0+IHtcclxuICAgIG15TW9kYWwgPSBuZXcgYm9vdHN0cmFwLk1vZGFsKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ215TW9kYWwnICkgKTtcclxuICAgIG15TW9kYWwuc2hvdygpO1xyXG59ICk7XHJcblxyXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ21vZGFsRGlzbWlzcycgKS5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCAoKSA9PiB7XHJcbiAgICAvLyBjb25zdCBteU1vZGFsID0gbmV3IGJvb3RzdHJhcC5Nb2RhbCggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdteU1vZGFsJyApICk7XHJcbiAgICBteU1vZGFsLmhpZGUoKTtcclxufSApO1xyXG5cclxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdzdWJtaXRBZGRUZWFtJyApLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsICgpID0+IHtcclxuICAgIC8vIGNvbnN0IG15TW9kYWwgPSBuZXcgYm9vdHN0cmFwLk1vZGFsKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ215TW9kYWwnICkgKTtcclxuICAgIG15TW9kYWwuaGlkZSgpO1xyXG5cclxuICAgIGNvbnN0IHRlYW1OYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdpbnB1dFRlYW1OYW1lJyApLnZhbHVlO1xyXG4gICAgaWYgKCB0ZWFtTmFtZS5sZW5ndGggPT09IDAgKSB7XHJcbiAgICAgICAgYWRkVG9hc3QoICdQbGVhc2UgZW50ZXIgYSAgdGVhbSBuYW1lJywgZG9jdW1lbnQuYm9keSwgRVJST1IgKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCB0ZWFtU2hvcnROYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdpbnB1dFNob3J0TmFtZScgKS52YWx1ZTtcclxuICAgIGlmICggdGVhbU5hbWUubGVuZ3RoID09PSAwICkge1xyXG4gICAgICAgIGFkZFRvYXN0KCAnUGxlYXNlIGVudGVyIGEgdGVhbSBTaG9ydCBuYW1lLicsIGRvY3VtZW50LmJvZHksIEVSUk9SICk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHRlYW1EZXNjcmlwdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAndGVhbURlc2NyaXB0aW9uJyApLnZhbHVlO1xyXG5cclxuICAgIGlmICggdGVhbU5hbWUubGVuZ3RoIDw9IDAgKSB7XHJcbiAgICAgICAgYWRkVG9hc3QoICdQbGVhc2UgZW50ZXIgYSBsb25nZXIgZGVzY3JpcHRpb24gKCAxMCBjaGFyYWN0ZXJzIG1pbiApJywgZG9jdW1lbnQuYm9keSwgRVJST1IgKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCB0ZWFtTWVtYmVycyA9ICggKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ2lucHV0TWVtYmVycycgKS52YWx1ZSApLnJlcGxhY2UoIC9cXHMrL2csICcnICkgKS5zcGxpdCggJywnICk7XHJcblxyXG4gICAgLy8gVE9ETzogVmFsaWRhdGlvblxyXG4gICAgY29uc3Qgc3VibWl0SlNPTiA9IEFERF9URUFNX0ZPUk07XHJcbiAgICBzdWJtaXRKU09OWyduYW1lJ10gPSB0ZWFtTmFtZTtcclxuICAgIHN1Ym1pdEpTT05bJ3Nob3J0TmFtZSddID0gdGVhbVNob3J0TmFtZTtcclxuICAgIHN1Ym1pdEpTT05bJ2Rlc2NyaXB0aW9uJ10gPSB0ZWFtRGVzY3JpcHRpb247XHJcbiAgICBjb25zdCBhdHRlbmRlZXNKU09OID0gW107XHJcblxyXG4gICAgZm9yICggbGV0IGlkeEF0dCA9IDA7IGlkeEF0dCA8IHRlYW1NZW1iZXJzLmxlbmd0aDsgaWR4QXR0ICs9IDEgKSB7XHJcbiAgICAgICAgY29uc3QgbWVtYmVyID0gdGVhbU1lbWJlcnNbaWR4QXR0XTtcclxuICAgICAgICBzd2l0Y2ggKCBhdHRlbmRlZVR5cGUoIG1lbWJlciApICkge1xyXG4gICAgICAgIGNhc2UgJ2VtYWlsJzpcclxuICAgICAgICAgICAgZm9yICggbGV0IGlkeCA9IDA7IGlkeCA8IHVzZXJzLmxlbmd0aDsgaWR4ICs9IDEgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIG1lbWJlci50b0xvd2VyQ2FzZSgpID09PSB1c2Vyc1tpZHhdWydlbWFpbCddLnRvTG93ZXJDYXNlKCkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0ZW5kZWVzSlNPTi5wdXNoKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJJZDogdXNlcnNbaWR4XVsnX2lkJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiB1c2Vyc1tpZHhdWydlbWFpbCddLFxyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OiBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdWJtaXRKU09OWydtZW1iZXJzJ10gPSBhdHRlbmRlZXNKU09OO1xyXG5cclxuICAgIGFkZFRlYW0oIHN1Ym1pdEpTT04gKVxyXG4gICAgICAgIC50aGVuKCAoIHJlc3BvbnNlICkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIHJlc3BvbnNlLm1lc3NhZ2UgPT09IFNVQ0NFU1MgKSB7XHJcbiAgICAgICAgICAgICAgICBteU1vZGFsLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIGFkZFRvYXN0KCAnVGVhbSBhZGRlZCBzdWNjZXNzZnVsbHknLCBkb2N1bWVudC5ib2R5LCBTVUNDRVNTICk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhZGRUb2FzdCggYEVycm9yIGFkZGluZyB0ZWFtOiAke3Jlc3BvbnNlLm1lc3NhZ2V9YCwgZG9jdW1lbnQuYm9keSwgRVJST1IgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gKVxyXG4gICAgICAgIC5jYXRjaCggKCBlcnJvciApID0+IHtcclxuICAgICAgICAgICAgbXlNb2RhbC5oaWRlKCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBhZGRUb2FzdCggYEVycm9yIGFkZGluZyB0ZWFtOiAke2Vycm9yLnJlc3BvbnNlLmRhdGEuZGVzY3JpcHRpb259YCwgZG9jdW1lbnQuYm9keSwgRVJST1IgKTtcclxuICAgICAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgICAgICBhZGRUb2FzdCggYEVycm9yIGFkZGluZyB0ZWFtOiAke2Vycm9yLm1lc3NhZ2V9YCwgZG9jdW1lbnQuYm9keSwgRVJST1IgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gKTtcclxufSApO1xyXG5cclxuaW5pdCgpO1xyXG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIjpyb290IHtcXHJcXG4gICAgZm9udC1zaXplOiAxNnB4O1xcclxcbn1cXHJcXG5cXHJcXG4qIHtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG59XFxyXFxuXFxyXFxuLm15LWNvbCB7XFxyXFxuICAgIGZsZXgtYmFzaXM6IDMwJTtcXHJcXG4gICAgZmxleC1ncm93OiAwO1xcclxcbiAgICBmbGV4LXNocmluazogMDtcXHJcXG59XFxyXFxuXFxyXFxuaHIge1xcclxcbiAgICBtYXJnaW4tdG9wOiAxcmVtO1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcclxcbiAgICBib3JkZXI6IDA7XFxyXFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMSk7XFxyXFxufVxcclxcblxcclxcbi5teS1ncmlkIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCgxOXJlbSwgMWZyKSk7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3B1YmxpYy9jc3MvdGVhbXNfbGlzdC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLFlBQVk7SUFDWixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLG1CQUFtQjtJQUNuQixTQUFTO0lBQ1Qsd0NBQXdDO0FBQzVDOztBQUVBO0lBQ0ksYUFBYTtJQUNiLDJEQUEyRDtBQUMvRFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6cm9vdCB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXHJcXG59XFxyXFxuXFxyXFxuKiB7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxufVxcclxcblxcclxcbi5teS1jb2wge1xcclxcbiAgICBmbGV4LWJhc2lzOiAzMCU7XFxyXFxuICAgIGZsZXgtZ3JvdzogMDtcXHJcXG4gICAgZmxleC1zaHJpbms6IDA7XFxyXFxufVxcclxcblxcclxcbmhyIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMXJlbTtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXHJcXG4gICAgYm9yZGVyOiAwO1xcclxcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEpO1xcclxcbn1cXHJcXG5cXHJcXG4ubXktZ3JpZCB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LCBtaW5tYXgoMTlyZW0sIDFmcikpO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDg1NjogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5PLmogPSAoY2h1bmtJZCkgPT4gKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9PT0gMCk7XG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuXHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcblx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMDtcblx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIHZhciByZXN1bHQgPSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHRpZihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbikgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG5cdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKCk7XG5cdFx0fVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkc1tpXV0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmttZWV0aW5nc1wiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmttZWV0aW5nc1wiXSB8fCBbXTtcbmNodW5rTG9hZGluZ0dsb2JhbC5mb3JFYWNoKHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgMCkpO1xuY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIGNodW5rTG9hZGluZ0dsb2JhbC5wdXNoLmJpbmQoY2h1bmtMb2FkaW5nR2xvYmFsKSk7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBkZXBlbmRzIG9uIG90aGVyIGxvYWRlZCBjaHVua3MgYW5kIGV4ZWN1dGlvbiBuZWVkIHRvIGJlIGRlbGF5ZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzY2MCw5NjBdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXygzNTE1KSkpXG5fX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==