(()=>{"use strict";var e,t={5562:(e,t,n)=>{n.d(t,{CT:()=>r,o3:()=>a,A1:()=>o,ID:()=>c,MR:()=>i,pn:()=>s});var r="/api",a="token",o="name",c="id",i="success",s="error"},3515:(e,t,n)=>{n(4039),n(9256);var r=n(3379),a=n.n(r),o=n(7795),c=n.n(o),i=n(569),s=n.n(i),u=n(3565),d=n.n(u),m=n(9216),l=n.n(m),p=n(4589),h=n.n(p),f=n(6076),g={};g.styleTagTransform=h(),g.setAttributes=d(),g.insert=s().bind(null,"head"),g.domAPI=c(),g.insertStyleElement=l(),a()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;var b=n(3136),v=n(5562),A=(n(3981),n(4559)),y=n.n(A),E=n(6451);function C(e,t,n,r,a,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function w(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){C(o,r,a,c,i,"next",e)}function i(e){C(o,r,a,c,i,"throw",e)}c(void 0)}))}}function x(){return(x=w(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y().get("".concat(v.CT,"/teams"),{headers:{Authorization:"".concat((0,E.LP)())}});case 2:return t=e.sent,e.abrupt("return",t.data);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function I(){return(I=w(regeneratorRuntime.mark((function e(t){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y().post("".concat(v.CT,"/teams/"),t,{headers:{Authorization:"".concat((0,E.LP)())}});case 2:return n=e.sent,e.abrupt("return",n.data);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function T(){return(T=w(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y().patch("".concat(v.CT,"/teams/").concat(t._id,"?action=add_member&email=").concat(n),{},{headers:{Authorization:"".concat((0,E.LP)())}});case 2:return r=e.sent,e.abrupt("return",r.data);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Z(){return(Z=w(regeneratorRuntime.mark((function e(t){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y().patch("".concat(v.CT,"/teams/").concat(t._id,"?action=remove_member"),{},{headers:{Authorization:"".concat((0,E.LP)())}});case 2:return n=e.sent,e.abrupt("return",n.data);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}n(1283),n(7588);const M={name:"Agile team 57",shortName:"agilenew",description:"Team spreading awareness about Agile practices at Zwiggy",members:[]};function L(e,t,n,r,a,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function B(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){L(o,r,a,c,i,"next",e)}function i(e){L(o,r,a,c,i,"throw",e)}c(void 0)}))}}function R(){return(R=B(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y().get("".concat(v.CT,"/users"),{headers:{Authorization:"".concat((0,E.LP)())}});case 2:return t=e.sent,e.abrupt("return",t.data);case 4:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var k=[];var P=null;document.getElementById("addNewTeamButton").addEventListener("click",(function(){(P=new bootstrap.Modal(document.getElementById("myModal"))).show()})),document.getElementById("modalDismiss").addEventListener("click",(function(){P.hide()})),document.getElementById("submitAddTeam").addEventListener("click",(function(){P.hide();var e,t=document.getElementById("inputTeamName").value;if(0!==t.length){var n=document.getElementById("inputShortName").value;if(0!==t.length){var r=document.getElementById("teamDescription").value;if(t.length<=0)(0,b.Z)("Please enter a longer description ( 10 characters min )",document.body,v.pn);else{var a=document.getElementById("inputMembers").value.replace(/\s+/g,"").split(","),o=M;o.name=t,o.shortName=n,o.description=r;for(var c=[],i=0;i<a.length;i+=1){var s=a[i];switch(e=s,/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(String(e).toLowerCase())?"email":/@[a-zA-Z\-0-9]+$/.test(String(e).toLowerCase())?"team":"none"){case"email":for(var u=0;u<k.length;u+=1)if(s.toLowerCase()===k[u].email.toLowerCase()){c.push({userId:k[u]._id,email:k[u].email});break}}}o.members=c,function(e){return I.apply(this,arguments)}(o).then((function(e){e.message===v.MR?(P.hide(),(0,b.Z)("Team added successfully",document.body,v.MR),document.getElementById("inputTeamName").value="",document.getElementById("inputShortName").value="",document.getElementById("teamDescription").value="",document.getElementById("inputMembers").value="",setTimeout((function(){window.location.reload()}),1500)):(0,b.Z)("Error adding team: ".concat(e.message),document.body,v.pn)})).catch((function(e){P.hide();try{(0,b.Z)("Error adding team: ".concat(e.response.data.description),document.body,v.pn)}catch(t){(0,b.Z)("Error adding team: ".concat(e.message),document.body,v.pn)}}))}}else(0,b.Z)("Please enter a team Short name.",document.body,v.pn)}else(0,b.Z)("Please enter a  team name",document.body,v.pn)})),null===localStorage.getItem(v.o3)&&(window.location="/login"),function(){return x.apply(this,arguments)}().then((function(e){e.message===v.MR?function(){return R.apply(this,arguments)}().then((function(t){t.message===v.MR?(k=t.data,function(e){var t=document.getElementById("teamsList");t.innerHTML="",e&&e.length>0?(document.getElementById("teamsListTitle").innerHTML="View and edit the teams that you are part of",e.forEach((function(e){var n=[];e.members.forEach((function(e){n.push(e.email)}));var r=document.createElement("div");r.setAttribute("class","card p-3 m-2");var a=document.createElement("div");a.setAttribute("class","card-body");var o=document.createElement("h5");o.setAttribute("class","card-title"),o.innerHTML=e.name,a.appendChild(o);var c=document.createElement("p");o.setAttribute("class","card-text"),c.innerHTML="@".concat(e.shortName),a.appendChild(c);var i=document.createElement("button");i.innerHTML="Leave team",i.setAttribute("class","button-outline-red px-4"),i.addEventListener("click",(function(){(function(e){return Z.apply(this,arguments)})(e).then((function(e){e.message===v.MR?((0,b.Z)("You have been removed from the team",document.body,v.MR),r.remove()):(0,b.Z)("Error removing: ".concat(e.message),document.body,v.pn)})).catch((function(e){try{(0,b.Z)("Error removing: ".concat(e.response.data.description),document.body,v.pn)}catch(t){(0,b.Z)("Error removing: ".concat(e.message),document.body,v.pn)}}))})),a.appendChild(i);var s=document.createElement("hr");s.setAttribute("class","my-3"),a.appendChild(s);var u=document.createElement("p");u.innerHTML="<strong>Members: </strong> ".concat(n.join(", ")),a.appendChild(u);var d=document.createElement("div");d.setAttribute("class","row gy-2 gx-3 align-items-center");var m=document.createElement("div");m.setAttribute("class","col-auto");var l=document.createElement("label");l.setAttribute("class","visually-hidden"),l.setAttribute("for","selectMember"),m.appendChild(l);var p=document.createElement("select");p.setAttribute("class","form-select"),p.setAttribute("id","selectMember"),p.setAttribute("aria-label","Select Member");var h=[];k.forEach((function(e){!1===n.includes(e.email)&&h.push(e)})),p.innerHTML='<option value="none" selected>Select member</option>',h.forEach((function(e){p.innerHTML+='<option value="'.concat(e.email,'">').concat(e.email,"</option>")})),m.appendChild(p),d.appendChild(m);var f=document.createElement("div");f.setAttribute("class","col-auto");var g=document.createElement("button");g.setAttribute("class","button mx-2"),g.innerHTML="Add member",g.addEventListener("click",(function(){"none"!==p.value&&function(e,t){return T.apply(this,arguments)}(e,p.value).then((function(e){e.message===v.MR?(n.push(p.value),u.innerHTML="<strong>Members: </strong> ".concat(n.join(", ")),(0,b.Z)("Added member successfully",document.body,v.MR)):(0,b.Z)("Error adding member: ".concat(e.message),document.body,v.pn)})).catch((function(e){try{(0,b.Z)("Error adding member: ".concat(e.response.data.description),document.body,v.pn)}catch(t){(0,b.Z)("Error adding member: ".concat(e.message),document.body,v.pn)}}))})),f.appendChild(g),d.appendChild(f),a.appendChild(d),r.appendChild(a),t.appendChild(r)}))):document.getElementById("teamsListTitle").innerHTML="Sorry:( you are not part of any team."}(e.data)):(0,b.Z)("Error fetching users: ".concat(t.message),document.body,v.pn)})).catch((function(e){try{(0,b.Z)("Error fetching users: ".concat(e.response.data.description),document.body,v.pn)}catch(t){(0,b.Z)("Error fetching users: ".concat(e.message),document.body,v.pn)}})):(0,b.Z)("Error fetching teams: ".concat(e.message),document.body,v.pn)})).catch((function(e){try{(0,b.Z)("Error fetching teams: ".concat(e.response.data.description),document.body,v.pn)}catch(t){(0,b.Z)("Error fetching teams: ".concat(e.message),document.body,v.pn)}}))},6076:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(6880),a=n.n(r),o=n(7705),c=n.n(o)()(a());c.push([e.id,":root {\r\n    font-size: 16px;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n}\r\n\r\n.my-col {\r\n    flex-basis: 30%;\r\n    flex-grow: 0;\r\n    flex-shrink: 0;\r\n}\r\n\r\nhr {\r\n    margin-top: 1rem;\r\n    margin-bottom: 1rem;\r\n    border: 0;\r\n    border-top: 1px solid rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.my-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(19rem, 1fr));\r\n}","",{version:3,sources:["webpack://./public/css/teams_list.css"],names:[],mappings:"AAAA;IACI,eAAe;AACnB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,SAAS;IACT,wCAAwC;AAC5C;;AAEA;IACI,aAAa;IACb,2DAA2D;AAC/D",sourcesContent:[":root {\r\n    font-size: 16px;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n}\r\n\r\n.my-col {\r\n    flex-basis: 30%;\r\n    flex-grow: 0;\r\n    flex-shrink: 0;\r\n}\r\n\r\nhr {\r\n    margin-top: 1rem;\r\n    margin-bottom: 1rem;\r\n    border: 0;\r\n    border-top: 1px solid rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.my-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(19rem, 1fr));\r\n}"],sourceRoot:""}]);const i=c}},n={};function r(e){var a=n[e];if(void 0!==a)return a.exports;var o=n[e]={id:e,exports:{}};return t[e](o,o.exports,r),o.exports}r.m=t,e=[],r.O=(t,n,a,o)=>{if(!n){var c=1/0;for(d=0;d<e.length;d++){for(var[n,a,o]=e[d],i=!0,s=0;s<n.length;s++)(!1&o||c>=o)&&Object.keys(r.O).every((e=>r.O[e](n[s])))?n.splice(s--,1):(i=!1,o<c&&(c=o));if(i){e.splice(d--,1);var u=a();void 0!==u&&(t=u)}}return t}o=o||0;for(var d=e.length;d>0&&e[d-1][2]>o;d--)e[d]=e[d-1];e[d]=[n,a,o]},r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{r.b=document.baseURI||self.location.href;var e={856:0};r.O.j=t=>0===e[t];var t=(t,n)=>{var a,o,[c,i,s]=n,u=0;for(a in i)r.o(i,a)&&(r.m[a]=i[a]);if(s)var d=s(r);for(t&&t(n);u<c.length;u++)o=c[u],r.o(e,o)&&e[o]&&e[o][0](),e[c[u]]=0;return r.O(d)},n=self.webpackChunkmeetings=self.webpackChunkmeetings||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=r.O(void 0,[39,911,960],(()=>r(3515)));a=r.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,