(()=>{"use strict";var n,e={5562:(n,e,r)=>{r.d(e,{CT:()=>t,o3:()=>o,A1:()=>a,ID:()=>i,MR:()=>c});var t="/api",o="token",a="name",i="id",c="success"},2618:(n,e,r)=>{r(4039),r(9256);var t=r(3379),o=r.n(t),a=r(7795),i=r.n(a),c=r(569),d=r.n(c),A=r(3565),s=r.n(A),l=r(9216),u=r.n(l),g=r(4589),m=r.n(g),h=r(9941),p={};p.styleTagTransform=m(),p.setAttributes=s(),p.insert=d().bind(null,"head"),p.domAPI=i(),p.insertStyleElement=u(),o()(h.Z,p),h.Z&&h.Z.locals&&h.Z.locals,r(3981);var v=r(3136),f=r(4559),b=r.n(f),C=r(5562),B=r(6451);function x(n,e,r,t,o,a,i){try{var c=n[a](i),d=c.value}catch(n){return void r(n)}c.done?e(d):Promise.resolve(d).then(t,o)}function I(n){return function(){var e=this,r=arguments;return new Promise((function(t,o){var a=n.apply(e,r);function i(n){x(a,t,o,i,c,"next",n)}function c(n){x(a,t,o,i,c,"throw",n)}i(void 0)}))}}function w(n){return y.apply(this,arguments)}function y(){return(y=I(regeneratorRuntime.mark((function n(e){var r,t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r="",e instanceof Date&&(r="".concat(e.getFullYear(),"-").concat(e.getMonth()+1,"-").concat(e.getDate())),n.next=4,b().get("".concat(C.CT,"/calendar?date=").concat(r),{headers:{Authorization:"".concat((0,B.LP)())}});case 4:return t=n.sent,n.abrupt("return",t.data);case 6:case"end":return n.stop()}}),n)})))).apply(this,arguments)}r(1283),r(7588);function E(n,e){var r="";return r+=n<10?"0".concat(n):n,(r+=":")+(e<10?"0".concat(e):e)}function k(n){var e=document.getElementById("selectedDate"),r=document.getElementById("selectedDay");e.innerHTML="".concat(n.getDate()," ").concat(["January","February","March","April","May","June","July","August","September","October","November","December"][n.getMonth()]," ").concat(n.getFullYear()),r.innerHTML=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][n.getDay()]}function T(n){var e=document.getElementById("calendarContainer");e.innerHTML="";for(var r=0;r<12;r+=1){var t;t=r<=9?"0".concat(r):r,e.innerHTML+='\n        <div class="calendar-hour d-flex">\n            <div class="calendar-hour-text px-2">'.concat(t,':00 am</div>\n            <div class="calendar-hour-bg px-2 flex-grow-1" id="calendarHour').concat(r,'"></div>\n        </div> ')}for(var o=12;o<24;o+=1){var a;a=o<=9?"0".concat(o):o,e.innerHTML+='\n        <div class="calendar-hour d-flex">\n            <div class="calendar-hour-text px-2">'.concat(a,':00 pm</div>\n            <div class="calendar-hour-bg px-2 flex-grow-1" id="calendarHour').concat(o,'"></div>\n        </div> ')}var i=new Date;i.setHours(0,0,0,0);var c=n;if(c.setHours(0,0,0,0),c.getTime()===i.getTime()){var d=new Date,A="am",s=d.getHours();d.getHours()>=12&&(A="pm",s-=12);var l=document.createElement("div");l.setAttribute("class","time-now d-flex"),l.style.top="".concat(70*d.getHours()+d.getMinutes(),"px"),l.innerHTML='<div class="time-now-text px-2">'.concat(s,":").concat(d.getMinutes()," ").concat(A,'</div>\n                <div class="flex-grow-1 bg-info time-now-line" id="timeNowHr"></div>'),e.appendChild(l)}}function R(n){n&&n.forEach((function(n){var e=function(n,e){return e.minutes+60*e.hours-(n.minutes+60*n.hours)}(n.startTime,n.endTime),r=[];n.attendees.forEach((function(n){r.push(n.email)}));var t=document.createElement("div");t.setAttribute("class","card-meeting"),t.setAttribute("id","card-meeting-".concat(n._id)),t.style.top="".concat(n.startTime.minutes,"px");var o=10*(n.endTime.hours-n.startTime.hours);t.style.height="".concat(e+o,"px");var a=document.createElement("div");a.setAttribute("class","row");var i=document.createElement("h5");i.setAttribute("id","card-meeting-name"),i.setAttribute("class","col-auto me-auto card-meeting-name"),i.innerHTML=n.name;var c=document.createElement("h5");c.setAttribute("id","card-meeting-time"),c.setAttribute("class","col-auto card-meeting-name");var d=E(n.startTime.hours,n.startTime.minutes),A=E(n.endTime.hours,n.endTime.minutes);c.innerHTML="".concat(d,"-").concat(A," (").concat(e," mins)"),a.appendChild(i),a.appendChild(c),t.appendChild(a);var s=document.createElement("p");s.setAttribute("id","card-meeting-attendees"),s.setAttribute("class","card-meeting-attendees"),s.innerHTML=r.join(", "),t.appendChild(s);var l=n.startTime.hours;document.getElementById("calendarHour".concat(l)).appendChild(t)}))}var M=new Pikaday({field:document.getElementById("datepicker"),toString:function(n){var e=n.getDate(),r=n.getMonth()+1,t=n.getFullYear();return"".concat(e,"/").concat(r,"/").concat(t)},setDefaultDate:!0,onSelect:function(){k(M.getDate()),T(new Date(M.getDate())),w(M.getDate()).then((function(n){n.message===C.MR?R(n.data):(0,v.Z)("Error Fetching your meetings: ".concat(response.message),document.body,ERROR)})).catch((function(n){try{(0,v.Z)("Error Fetching your meetings: ".concat(n.response.data.description),document.body,ERROR)}catch(e){(0,v.Z)("Error Fetching your meetings: ".concat(n.message),document.body,ERROR)}}))}});!function(){null===localStorage.getItem(C.o3)&&(window.location="/login");var n=new Date;document.getElementById("datepicker").value="".concat(n.getDate(),"/").concat(n.getMonth()+1,"/").concat(n.getFullYear()),k(n),T(new Date),w(n).then((function(n){n.message===C.MR?R(n.data):(0,v.Z)("Error Fetching your meetings: ".concat(response.message),document.body,ERROR)})).catch((function(n){try{(0,v.Z)("Login Error: ".concat(n.response.data.description),document.body,ERROR)}catch(e){(0,v.Z)("Login Error: ".concat(n.message),document.body,ERROR)}}))}()},9941:(n,e,r)=>{r.d(e,{Z:()=>c});var t=r(6880),o=r.n(t),a=r(7705),i=r.n(a)()(o());i.push([n.id,":root {\r\n    font-size: 16px;\r\n}\r\n\r\nhr {\r\n    margin-top: 1rem;\r\n    margin-bottom: 1rem;\r\n    border: 0;\r\n    border-top: 1px solid rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.calendar-container {\r\n    position: relative;\r\n}\r\n\r\n.calendar-hour {\r\n    position: relative;\r\n    height: 60px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.calendar-hour-bg {\r\n    position: relative;\r\n    background: white;\r\n}\r\n\r\n.card-meeting {\r\n    position: absolute;\r\n    width: auto;\r\n    right: 10px;\r\n    left: 10px;\r\n    z-index: 2;\r\n    padding: 10px;\r\n    background-color: hsla(145, 45%, 60%, 0.438);\r\n    border-left: 4px solid #2ecc71;\r\n    box-shadow: 1px 7px 14px -5px rgba(0,0,0,0.25);\r\n    overflow: hidden;\r\n    border-radius: 4px;\r\n    min-height: 40px;\r\n}\r\n\r\n.card-meeting:hover {\r\n    z-index: 3;\r\n    background: rgb(46,204,113);\r\n    background: linear-gradient(90deg, rgba(46,204,113,1) 0%, rgba(43,190,114,1) 100%);\r\n    border-left: none;\r\n    overflow: visible;\r\n    height: max-content !important;\r\n    transform: scale(1.1);\r\n    transition: .2s ease-in-out;\r\n}\r\n\r\n.card-meeting-name {\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: #2ecc71;\r\n}\r\n.card-meeting:hover .card-meeting-name{\r\n    color: white;\r\n}\r\n.card-meeting-attendees {\r\n    font-size: 16px;\r\n    font-weight: 300;\r\n    color: #2ecc71;\r\n}\r\n.card-meeting:hover .card-meeting-attendees {\r\n    color: white;\r\n}\r\n\r\n.time-now {\r\n    position: absolute;\r\n    width: 100%;\r\n}\r\n\r\n\r\n.time-now-text {\r\n    color: hsl(202, 98%, 58%)\r\n}\r\n\r\n.time-now-line {\r\n    height: 3px;\r\n    align-self: center;\r\n}\r\n\r\n.date-input{\r\n    border-width: 1px;\r\n}\r\n","",{version:3,sources:["webpack://./public/css/index.css"],names:[],mappings:"AAAA;IACI,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,SAAS;IACT,wCAAwC;AAC5C;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,WAAW;IACX,UAAU;IACV,UAAU;IACV,aAAa;IACb,4CAA4C;IAC5C,8BAA8B;IAC9B,8CAA8C;IAC9C,gBAAgB;IAChB,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,UAAU;IACV,2BAA2B;IAC3B,kFAAkF;IAClF,iBAAiB;IACjB,iBAAiB;IACjB,8BAA8B;IAC9B,qBAAqB;IACrB,2BAA2B;AAC/B;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,cAAc;AAClB;AACA;IACI,YAAY;AAChB;AACA;IACI,eAAe;IACf,gBAAgB;IAChB,cAAc;AAClB;AACA;IACI,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf;;;AAGA;IACI;AACJ;;AAEA;IACI,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB",sourcesContent:[":root {\r\n    font-size: 16px;\r\n}\r\n\r\nhr {\r\n    margin-top: 1rem;\r\n    margin-bottom: 1rem;\r\n    border: 0;\r\n    border-top: 1px solid rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.calendar-container {\r\n    position: relative;\r\n}\r\n\r\n.calendar-hour {\r\n    position: relative;\r\n    height: 60px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.calendar-hour-bg {\r\n    position: relative;\r\n    background: white;\r\n}\r\n\r\n.card-meeting {\r\n    position: absolute;\r\n    width: auto;\r\n    right: 10px;\r\n    left: 10px;\r\n    z-index: 2;\r\n    padding: 10px;\r\n    background-color: hsla(145, 45%, 60%, 0.438);\r\n    border-left: 4px solid #2ecc71;\r\n    box-shadow: 1px 7px 14px -5px rgba(0,0,0,0.25);\r\n    overflow: hidden;\r\n    border-radius: 4px;\r\n    min-height: 40px;\r\n}\r\n\r\n.card-meeting:hover {\r\n    z-index: 3;\r\n    background: rgb(46,204,113);\r\n    background: linear-gradient(90deg, rgba(46,204,113,1) 0%, rgba(43,190,114,1) 100%);\r\n    border-left: none;\r\n    overflow: visible;\r\n    height: max-content !important;\r\n    transform: scale(1.1);\r\n    transition: .2s ease-in-out;\r\n}\r\n\r\n.card-meeting-name {\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: #2ecc71;\r\n}\r\n.card-meeting:hover .card-meeting-name{\r\n    color: white;\r\n}\r\n.card-meeting-attendees {\r\n    font-size: 16px;\r\n    font-weight: 300;\r\n    color: #2ecc71;\r\n}\r\n.card-meeting:hover .card-meeting-attendees {\r\n    color: white;\r\n}\r\n\r\n.time-now {\r\n    position: absolute;\r\n    width: 100%;\r\n}\r\n\r\n\r\n.time-now-text {\r\n    color: hsl(202, 98%, 58%)\r\n}\r\n\r\n.time-now-line {\r\n    height: 3px;\r\n    align-self: center;\r\n}\r\n\r\n.date-input{\r\n    border-width: 1px;\r\n}\r\n"],sourceRoot:""}]);const c=i}},r={};function t(n){var o=r[n];if(void 0!==o)return o.exports;var a=r[n]={id:n,exports:{}};return e[n](a,a.exports,t),a.exports}t.m=e,n=[],t.O=(e,r,o,a)=>{if(!r){var i=1/0;for(s=0;s<n.length;s++){for(var[r,o,a]=n[s],c=!0,d=0;d<r.length;d++)(!1&a||i>=a)&&Object.keys(t.O).every((n=>t.O[n](r[d])))?r.splice(d--,1):(c=!1,a<i&&(i=a));if(c){n.splice(s--,1);var A=o();void 0!==A&&(e=A)}}return e}a=a||0;for(var s=n.length;s>0&&n[s-1][2]>a;s--)n[s]=n[s-1];n[s]=[r,o,a]},t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{t.b=document.baseURI||self.location.href;var n={826:0};t.O.j=e=>0===n[e];var e=(e,r)=>{var o,a,[i,c,d]=r,A=0;for(o in c)t.o(c,o)&&(t.m[o]=c[o]);if(d)var s=d(t);for(e&&e(r);A<i.length;A++)a=i[A],t.o(n,a)&&n[a]&&n[a][0](),n[i[A]]=0;return t.O(s)},r=self.webpackChunkmeetings=self.webpackChunkmeetings||[];r.forEach(e.bind(null,0)),r.push=e.bind(null,r.push.bind(r))})();var o=t.O(void 0,[660,960],(()=>t(2618)));o=t.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,